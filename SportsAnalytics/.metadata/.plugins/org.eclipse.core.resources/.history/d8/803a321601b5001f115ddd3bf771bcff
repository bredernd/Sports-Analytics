package com.cps298.nba.service;

import java.util.List;

import org.hibernate.Session;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.cps298.nba.dao.Dao;
import com.cps298.nba.main_entity.GameSechedule;
import com.cps298.nba.main_entity.PlayerStats;
import com.cps298.nba.main_entity.TeamPlayers;
import com.cps298.nba.main_entity.TeamRankings;
import com.cps298.nba.main_entity.TeamStats;
import com.cps298.nba.main_entity.Teams;

import jakarta.transaction.Transactional;

@Service
public class ServiceImp implements DaoService {

    @Autowired
    private Dao teamDAO;

    @Override
    @Transactional
    public void saveTeams(List<Teams> teams) {
        if (teams == null || teams.isEmpty()) {
            throw new IllegalArgumentException("The team list cannot be null or empty.");
        }
        teamDAO.saveTeams(teams); // Save all teams
    }

    @Override
    @Transactional
    public Teams getTeam(String teamId) {
        Teams team = teamDAO.getTeam(teamId);
        if (team == null) {
            System.out.println("No team found with the given ID: " + teamId);
        }
        return team;
    }

    @Override
    @Transactional
    public List<Teams> getAllTeams() {
        return teamDAO.getAllTeams();
    }

	@Override
	@Transactional
	public void saveTeamStats(List<TeamStats> teamStats) {
		if (teamStats == null || teamStats.isEmpty()) {
            throw new IllegalArgumentException("The team stats list cannot be null or empty.");
        }
        teamDAO.saveTeamStats(teamStats);
		
	}

	@Override
	@Transactional
	public List<TeamStats> getAllTeamStats() {
		return teamDAO.getAllTeamStats();
	}

	@Override
	@Transactional
	public TeamStats getTeamStats(String teamId) {
		 if (teamId == null || teamId.trim().isEmpty()) {
	            throw new IllegalArgumentException("The team ID cannot be null or empty.");
	        }
	        return teamDAO.getTeamStats(teamId);
	}

	@Override
	@Transactional
	public void saveTeamRankings(List<TeamRankings> rankings) {
		if (rankings == null || rankings.isEmpty()) {
            throw new IllegalArgumentException("The team rankings list cannot be null or empty.");
        }
        teamDAO.saveTeamRankings(rankings);
		
	}

	@Override
	@Transactional
	public List<TeamRankings> getAllTeamRankings() {
		return teamDAO.getAllTeamRankings();
	}

	@Override
	@Transactional
	public TeamRankings getTeamRankings(String teamId) {
		if (teamId == null || teamId.trim().isEmpty()) {
            throw new IllegalArgumentException("The team ID cannot be null or empty.");
        }
        return teamDAO.getTeamRankings(teamId);

	}

	@Override
	@Transactional
	public void saveTeamPlayers(List<TeamPlayers> players) {
		 if (players == null || players.isEmpty()) {
	            throw new IllegalArgumentException("The team players list cannot be null or empty.");
	        }
	        teamDAO.saveTeamPlayers(players);
		
	}

	@Override
	@Transactional
	public List<TeamPlayers> getAllTeamPlayers() {
		return teamDAO.getAllTeamPlayers();
	}

	@Override
	@Transactional
	public List<TeamPlayers> getTeamPlayers(String teamId) {
		if (teamId == null || teamId.trim().isEmpty()) {
            throw new IllegalArgumentException("The team ID cannot be null or empty.");
        }
        return teamDAO.getTeamPlayers(teamId);
	}

	@Override
	@Transactional
	public void savePlayerStats(List<PlayerStats> stats) {
		if (stats == null || stats.isEmpty()) {
            throw new IllegalArgumentException("The player stats list cannot be null or empty.");
        }
        teamDAO.savePlayerStats(stats);
		
	}

	@Override
	@Transactional
	public List<PlayerStats> getAllPlayerStats() {
		return teamDAO.getAllPlayerStats();
	}

	@Override
	@Transactional
	public PlayerStats getPlayerStats(String playerId) {
		if (playerId == null || playerId.trim().isEmpty()) {
            throw new IllegalArgumentException("The player ID cannot be null or empty.");
        }
        return teamDAO.getPlayerStats(playerId);
	}

	@Override
	@Transactional
	public void saveGameSchedule(List<GameSechedule> schedule) {
		if (schedule == null || schedule.isEmpty()) {
            throw new IllegalArgumentException("The game schedule list cannot be null or empty.");
        }
        teamDAO.saveGameSchedule(schedule);
		
	}

	@Override
	@Transactional
	public List<GameSechedule> getAllGameSchedule() {
		 return teamDAO.getAllGameSchedule();
	}
	
    @Override
    @Transactional
    public PlayerStats getBestThreePntEff() {
        return teamDAO.getBestThreePntEff();
    }
    
    @Override
    @Transactional
    public PlayerStats getBestTwoPntEff() {
        return teamDAO.getBestTwoPntEff();
    }
    
    @Override
    @Transactional
    public PlayerStats getBestEff() {
        return teamDAO.getBestEff();
    }
    
    @Override
    @Transactional
    public PlayerStats getBestAssist() {
        return teamDAO.getBestAssist();
    }
    
    @Override
    @Transactional
    public PlayerStats getBestSteals() {
        return teamDAO.getBestSteals();
    }
    
    @Override
    @Transactional
    public PlayerStats getBestBlocks() {
        return teamDAO.getBestBlocks();
    }
    
	
}
